package main

import "fmt"

/*
 * 튜플(Tuple)은 여러 부분으로 구성된 크기가 유한한 순서 리스트(Finite Ordered List)이다.
 * 튜플에서 가장 중요한 사항은 튜플이란 타입을 Go 언어에서 직접 지원하지 않는다는 것이다.
 * 다시 말해 튜플을 사용하도록 어느 정도 지원하고는 있지만, 공식적으로 제공되는 기능은 아니다.
 *
 * 함수에서 여러 개의 값을 구조체에 묶어서 리턴하지 않고 값들을 곧바로 작성할 수 있다.
 * 이 기능을 이용하면 다양한 버그가 발생할 가능성을 크게 줄일 수 있다.
 *
 * 함수에서 리턴하는 여러 값 중에서 관심 없는 값들은 그 자리에 언더스코어(_)를 적어주면 된다.
 * Go 언어에서는 변수를 선언만 하고 실제로 쓰지 않으면 컴파일 에러가 발생한다.
 */
func retThree(x int) (int, int, int) {
	return 2 * x, x * x, -x
}

func main() {
	// retThree() 함수를 두 번 호출했다. 첫 번째는 리턴 값을 따로 저장하지 않았다.
	// 두 번째로 호출할 때는 retThree()에서 리턴하는 세 개의 값을 각각 다른 변수에
	// 저장했는데, 이를 한 문장으로 표현했다. Go 언어의 용어로 이렇게 작성하는 것을
	// 튜플 할당(Tuple Assignment)이라 부른다.
	fmt.Println(retThree(10))  // n1 = 2 * 10, n2 = 10 * 10, n3 = -10
	n1, n2, n3 := retThree(20) // n1 = 2 * 20, n2 = 20 * 20, n3 = -20
	fmt.Println(n1, n2, n3)

	// 임시 변수 하나를 따로 사용하거나 여러 개의 표현식으로 작성하지 않고도
	// 두 값을 바꾸는 작업(Swap)을 상당히 세련되게 처리하는 것을 볼 수 있다.
	n1, n2 = n2, n1                // n1 = 40, n2 = 400 ==> n1 = 400, n2 = 40
	fmt.Println(n1, n2, n3)        // n1 = 400, n2 = 40, n3 = -20
	x1, x2, x3 := n1*2, n1*n1, -n1 // x1 = n1 * 2 = 800, x2 = n1 * n1 = 160000, x3 = -n1 = -400
	fmt.Println(x1, x2, x3)
}
