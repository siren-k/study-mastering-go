package main

import (
	"aPackage"
	"fmt"
)

/*
 * Go 패키지 잘 만드는 방법
 *
 * Go 패키지는 디렉토리로 구성되고 그 안에 공용(Public) 요소와 사설(Private) 요소를 가질 수 있다.
 * 공용 요소는 패키지 내부뿐만 아니라, 패키지 외부에서도 사용할 수 있는 반면, 사설 요소는 패키지 내부에서만
 * 사용할 수 있다.
 *
 * 뛰어난 Go 패키지를 작성할 때 따르면 좋은 규칙을 몇 가지 소개하면 다음과 같다.
 * - 패키지를 제대로 만들기 위한 비공식 규칙 중에서도 첫 번째는 패키지의 구성 요소들이 어떤 식으로든 서로
 *   관련이 있어야 한다는 것이다. 자동차를 지원하는 패키지를 만든다면 자동차에 대한 기능과 자전거에 대한
 *   기능을 한 패키지에 섞으면 안 된다. 쉽게 말해 한 패키지에 너무 많은 기능을 넣은 것보다 차라리 쓸데
 *   없을 정도로 패키지를 잘게 나누는 것이 낫다. 또한 패키지는 간결하고 세련되게 작성하되, 너무 간단하거나
 *   취약하게 만들면 안 된다.
 * - 두 번째로 적용할 수 있는 규칙은 패키지를 외부에 공개하기 전에 먼저 내부적으로 충분히 사용해봐야 한다.
 *   그러면 어처구니 없는 버그를 발견할 수 있고, 원하는 방식으로 잘 작동하는지 확인할 수 있다. 그런 다음,
 *   동료 개발자들이 테스트해 볼 수 있도록 공유하고, 최종적으로 외부에 공개한다.
 * - 여러분이 만든 패키지에 대한 사용자의 유형을 떠올려본다. 그리고 각 사용자층이 즐겁게 사용할 수 있는지,
 *   해결하려는 것보다 큰 문제를 만들지는 않는지 검증한다.
 * - 특별한 이유가 없다면 패키지에서 함수를 너무 많이 제공하지 않는다. 패키지에서 제공하는 함수의 수가
 *   적어야 이해하기도 쉽고 사용하기도 쉽다. 또한 함수의 이름만 봐도 기능을 알 수 있도록 표현하되 너무
 *   긴 이름은 피한다.
 * - 인터페이스를 활용하면 함수의 활용도를 높일 수 있다. 따라서 적절하다고 판단되면 함수의 매개변수나 리턴
 *   함수의 매개변수나 리턴 타입을 한 가지 타입으로 지정하지 말고 인터페이스로 정의한다.
 * - 패키지를 업데이트할 때 꼭 필요한 경우가 아니라면 기존 버전과 크게 달라지거나 충돌이 발생하지 않게 한다.
 *   반드시 지켜야할 굉장히 중요한 규칙이다.
 * - Go 패키지를 새로 만들 때, 비슷한 태스크나 개념을 하나로 묶을 수 있도록 여러 개의 파일들로 나눠서
 *   작성한다.
 * - 표준 라이브러리에 적용된 규칙에 따라 패키지를 작성한다. 표준 라이브러리에 속한 Go 패키지의 코드를
 *   읽어보면 도움된다.
 * - 이미 존재하는 패키지를 새로 만들지 않는다. 기존 패키지를 수정하거나 별도의 버전으로 만든다.
 * - 로그 정보를 화면에 출력하는 패키지를 좋아할 사람은 없다. 굳이 필요하다면 로그 출력 기능을 옵션으로
 *   제공하는 것이 보다 세련된 방법이다.
 * - 작성한 Go 패키지의 코드는 다른 Go 프로그램 코드와 잘 어울려야 한다. 다시 말해 여러분의 패키지를
 *   사용하는 프로그램의 코드를 봤을 때 그 패키지의 함수 이름이 유난히 눈데 띈다면 함수의 이름을 다른 식으로
 *   변경하는 것이 좋다. 패키지 이르믄 거의 모든 곳에서 사용되기 때문에 간결하고 뛰어난 이름을 짓는 것이 좋다.
 * - 새로운 타임 정의는 이름 처음 사용하는 곳에 가까이 두면 편하다. 그 타입의 정의를 찾기 위해 소스 코드르
 *   뒤지는 것을 좋아할 사람은 없다.
 * - 작성한 패키지에 대해 테스트 파일을 만든다. 패키지에 테스트 파일이 함꼐 제공되면 좀 더 전문적으로 보인다.
 *   사소한 부분이 큰 차이를 만들어내며, 여러분을 제대로 된 개발자로 바라볼 수 있다. 테스트에 대해서는 11장,
 *   '코드 테스팅, 최적화, 프로파일링'에서 자세히 소개한다.
 * - 마지막으로 특별한 장점이 없는 패키지를 만들지 않는다. 그 시간에 차라리 다른 일을 하는게 낫다.
 *   시간을 함부로 낭비하지 말라.
 */
func main() {
	fmt.Println("Using aPackage")
	aPackage.A()
	aPackage.B()
	fmt.Println(aPackage.MyConstant)
}
